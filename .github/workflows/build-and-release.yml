name: Build and Release Docker Nomad Plugin

on:
  push:
    tags:
      - 'v*'

env:
  PLUGIN_NAME: docker-nomad
  GO_FILES: main.go

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.0'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          OUTPUT="${{ env.PLUGIN_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          go build -o "${OUTPUT}" ${{ env.GO_FILES }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ env.PLUGIN_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name="${GITHUB_REF#refs/tags/}"
          release_name="Release ${tag_name}"
          gh release create "${tag_name}" \
            --title "${release_name}" \
            --notes "Release ${tag_name}" \
            ./artifacts/**/*

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for asset in artifacts/${{ env.PLUGIN_NAME }}-*/*; do
            echo "Uploading $asset"
            gh release upload "${GITHUB_REF#refs/tags/}" "$asset" --clobber
          done